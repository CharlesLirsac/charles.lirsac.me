//  ===============================================
//
//  General helpers used throughout all modules
//  and components
//
//  Some depends on default values set in
//  variables.scss
//
//  ===============================================

//  FUNCTIONS
//  ---------------------------------

@function black($opacity) {
    @return rgba(0, 0, 0, $opacity);
}

@function white($opacity) {
    @return rgba(255, 255, 255, $opacity);
}

//  Dimensions

@function rems($target) {
    @return ($target/$fs-base)#{rem};
}

@function ems($target, $context: $fs-base) {
    @return ($target/$context)#{em};
}

@function pxs($px) {
    @return ($px)#{px};
}

@function breakpoint($px, $context : 16) {
    @return ($px/$context)#{em};
}

@function modular-scale($ratio, $base, $up) {
    $r: $base;
    @if $up >= 0 {
        @for $i from 1 through $up {
            $r: $r * $ratio;
        }
    } @else {
        @for $i from $up to 0 {
            $r: $r / $ratio;
        }
    }
    @return $r;
}

@function ms-m($up) {
    @return modular-scale($ratio, $fs-main, $up);
}

@function ms-i($up) {
    @return modular-scale($ratio, $fs-important, $up);
}

@function ms-b($up) {
    @return modular-scale($ratio, $baseline, $up);
}

@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

//  MIXINS
//  ---------------------------------

// Embossing mixins taken from : http://sachagreif.com/useful-sass-mixins/

@mixin letterpress($opacity) {
    text-shadow: white($opacity) 0 1px 0;
}

@mixin box-emboss($opacity, $opacity2) {
    box-shadow: white($opacity) 0 1px 0, inset black($opacity2) 0 1px 0;
}

// Adapted rem/em fallback from : http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/

@mixin rems($property, $values...) {
    $px-values: null;
    $rem-values: null;

    @each $value in $values {
        $px-values: append($px-values, unquote(pxs($value)), space);
        $rem-values: append($rem-values, unquote(rems($value)), space);
    }

    #{$property}: $px-values;
    #{$property}: $rem-values;
}

@mixin ems($property, $context, $values...) {
    $px-values: null;
    $em-values: null;

    @each $value in $values {
        $px-values: append($px-values, unquote(pxs($value)), space);
        $em-values: append($em-values, unquote(ems($value, $context)), space);
    }

    #{$property}: $px-values;
    #{$property}: $em-values;
}

// Shapes and size

@mixin block-height($h) {
    @include rems(height, $h);
    @include rems(line-height, $h);
}

@mixin square($s) {
    @include rems(width, $s);
    @include block-height($s);
}

//  Typography

@mixin font-size($size, $context: 0) {
    font-size: $size#{px};
    @if $context == 0 {
        font-size: rems($size);
    } @else {
        font-size: ems($size, $context);
    }
}

@mixin line-height($height, $context : $fs-base) {
    @include ems(line-height, $context, $height)
}

@mixin icon() {
    &:before {
        font-family: "icons" !important;
        font-style: normal !important;
        font-weight: normal !important;
        font-variant: normal !important;
        text-transform: none !important;
        speak: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
}

@mixin icon-content($string, $size: 0, $right: 0) {
    &:before {
        content: $string;
        @if $size > 0 {
            @include font-size($size);
        }
        @if $right > 0 {
            @include rems(padding-right, $right);
        }
    }

}

@mixin force-link-color($color) {
    color: $color;
    &:visited {
        color: $color;
    }
}

// Positionning

@mixin centered($width) {
    margin-left: auto;
    margin-right: auto;
    @include rems(max-width, $width);
    width: 100%;
    padding-left: 3%;
    padding-right: 3%;
    @media screen and (min-width: breakpoint($width)) {
        padding-left: 0;
        padding-right: 0;
    }
}

// SILENT CLASSES
// ---------------------------------

%clearfix {
    *zoom: 1;
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}

%border-box {
    box-sizing: border-box;
}

%center {
    @include centered($w-main);
}

%small-center {
    @include centered($w-small);
}

%large-center {
    @include centered($w-large);
}

%wide-center {
    @include centered($w-wide);
}